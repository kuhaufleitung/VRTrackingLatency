//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/LatencyInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LatencyInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LatencyInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LatencyInput"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""4d30b993-6e4b-418d-9849-3bb59d177d10"",
            ""actions"": [
                {
                    ""name"": ""UpHMD"",
                    ""type"": ""Button"",
                    ""id"": ""057ea5fa-a822-48cd-980c-159b97837b09"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownHMD"",
                    ""type"": ""Button"",
                    ""id"": ""2a003a10-fb97-4f8f-bde1-e90e564a611d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpController"",
                    ""type"": ""Button"",
                    ""id"": ""936333fa-fb61-435a-884a-b331cf4efed3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownController"",
                    ""type"": ""Button"",
                    ""id"": ""b5513387-7ba4-4fce-935b-80e97f608d31"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf146e2e-e61f-49d8-83dd-2e470c36d05d"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpHMD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cbb619b-8aeb-4262-b041-f3cf12c43316"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpHMD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de7afb41-3f7e-47bf-831a-645c0fd206b1"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownHMD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a9c5add-61cb-4a2d-b881-1fd16c42e396"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownHMD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""058acd9d-c76b-4d27-838a-f041ccd7c5c2"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9c3d23e-b930-4046-85ea-e4e47dd3eccd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""588eca2c-40c3-4a88-a55e-9676556cf9d0"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c78f5b01-d208-439d-9b5b-3d4b8735521f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_UpHMD = m_Default.FindAction("UpHMD", throwIfNotFound: true);
        m_Default_DownHMD = m_Default.FindAction("DownHMD", throwIfNotFound: true);
        m_Default_UpController = m_Default.FindAction("UpController", throwIfNotFound: true);
        m_Default_DownController = m_Default.FindAction("DownController", throwIfNotFound: true);
    }

    ~@LatencyInput()
    {
        UnityEngine.Debug.Assert(!m_Default.enabled, "This will cause a leak and performance issues, LatencyInput.Default.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_UpHMD;
    private readonly InputAction m_Default_DownHMD;
    private readonly InputAction m_Default_UpController;
    private readonly InputAction m_Default_DownController;
    public struct DefaultActions
    {
        private @LatencyInput m_Wrapper;
        public DefaultActions(@LatencyInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpHMD => m_Wrapper.m_Default_UpHMD;
        public InputAction @DownHMD => m_Wrapper.m_Default_DownHMD;
        public InputAction @UpController => m_Wrapper.m_Default_UpController;
        public InputAction @DownController => m_Wrapper.m_Default_DownController;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @UpHMD.started += instance.OnUpHMD;
            @UpHMD.performed += instance.OnUpHMD;
            @UpHMD.canceled += instance.OnUpHMD;
            @DownHMD.started += instance.OnDownHMD;
            @DownHMD.performed += instance.OnDownHMD;
            @DownHMD.canceled += instance.OnDownHMD;
            @UpController.started += instance.OnUpController;
            @UpController.performed += instance.OnUpController;
            @UpController.canceled += instance.OnUpController;
            @DownController.started += instance.OnDownController;
            @DownController.performed += instance.OnDownController;
            @DownController.canceled += instance.OnDownController;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @UpHMD.started -= instance.OnUpHMD;
            @UpHMD.performed -= instance.OnUpHMD;
            @UpHMD.canceled -= instance.OnUpHMD;
            @DownHMD.started -= instance.OnDownHMD;
            @DownHMD.performed -= instance.OnDownHMD;
            @DownHMD.canceled -= instance.OnDownHMD;
            @UpController.started -= instance.OnUpController;
            @UpController.performed -= instance.OnUpController;
            @UpController.canceled -= instance.OnUpController;
            @DownController.started -= instance.OnDownController;
            @DownController.performed -= instance.OnDownController;
            @DownController.canceled -= instance.OnDownController;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnUpHMD(InputAction.CallbackContext context);
        void OnDownHMD(InputAction.CallbackContext context);
        void OnUpController(InputAction.CallbackContext context);
        void OnDownController(InputAction.CallbackContext context);
    }
}
